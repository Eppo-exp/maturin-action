name: Test
on: [push, pull_request]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: npm install
        run: npm install
      - name: lint
        run: npm run lint

  start-runner:
    name: Start self-hosted ECS runner
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      label: ${{ steps.start-ecs-runner.outputs.label }}
      ecs-instance-id: ${{ steps.start-ecs-runner.outputs.ecs-instance-id }}
    steps:
      - uses: actions/checkout@v2
      - name: Start ECS runner
        id: start-ecs-runner
        uses: messense/huaweicloud-github-runner@main
        with:
          mode: start
          count: 2
          github-token: ${{ secrets.GH_PAT }}
          huawei-cloud-ak: ${{ secrets.HUAWEI_CLOUD_AK }}
          huawei-cloud-sk: ${{ secrets.HUAWEI_CLOUD_SK }}
          project-id: ${{ secrets.PROJECT_ID }}
          availability-zone: ap-southeast-1b
          ecs-image-id: 41442587-b248-48db-b1b8-7aadac9dc273
          ecs-instance-type: kc1.large.2
          vpc-id: ${{ secrets.VPC_ID }}
          subnet-id: ${{ secrets.SUBNET_ID }}
          security-group-id: ${{ secrets.SECURITY_GROUP_ID }}

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: [lint, start-runner]
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
          - ${{ needs.start-runner.outputs.label }}
        toolchain: [stable, nightly]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: PyO3/maturin
          ref: main
          path: maturin
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: maturin build
        uses: ./
        with:
          rust-toolchain: ${{ matrix.toolchain }}
          args: -m maturin/test-crates/pyo3-mixed/Cargo.toml
      - name: maturin build universal2
        if: matrix.os == 'macos-latest'
        uses: ./
        with:
          args: -m maturin/test-crates/pyo3-mixed/Cargo.toml --universal2
      - name: check maturin in PATH
        run: maturin --version
      - name: maturin build manylinux auto
        if: matrix.os == 'ubuntu-latest'
        uses: ./
        with:
          args: -m maturin/test-crates/pyo3-mixed/Cargo.toml
          manylinux: 'auto'
      - name: maturin build manylinux2014
        uses: ./
        with:
          args: -m maturin/test-crates/pyo3-mixed/Cargo.toml
          manylinux: '2014'
      - name: maturin build nightly powerpc64le musl
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.toolchain == 'nightly' }}
        uses: ./
        with:
          rust-toolchain: nightly
          args: -m maturin/test-crates/hello-world/Cargo.toml
          manylinux: 'auto'
          target: 'powerpc64le-unknown-linux-musl'
      - name: maturin build manylinux off
        uses: ./
        with:
          args: -m maturin/test-crates/pyo3-mixed/Cargo.toml
          manylinux: 'off'
      - name: maturin build container off
        uses: ./
        with:
          args: -m maturin/test-crates/pyo3-mixed/Cargo.toml
          manylinux: '2_24'
          container: 'off'

  test-manylinux:
    name: Manylinux Test Suite
    runs-on: ${{ matrix.os }}
    needs: [lint, start-runner]
    strategy:
      matrix:
        os:
          - ubuntu-latest
        platform: [
          {
            manylinux: '2010',
            target: 'x86_64',  # Test target alias
            test-crate: 'maturin/test-crates/pyo3-mixed'
          },
          {
            manylinux: '2010',
            target: 'i686-unknown-linux-gnu',
            test-crate: 'maturin/test-crates/pyo3-mixed'
          },
          {
            manylinux: '2014',
            target: 'aarch64-unknown-linux-gnu',
            test-crate: 'maturin/test-crates/pyo3-pure'  # abi3
          },
          {
            manylinux: '2014',
            target: 'armv7-unknown-linux-gnueabihf',
            test-crate: 'maturin/test-crates/pyo3-pure'  # abi3
          },
          {
            manylinux: '2014',
            target: 'powerpc64le-unknown-linux-gnu',
            test-crate: 'maturin/test-crates/pyo3-mixed'
          },
          {
            manylinux: 'manylinux_2_24',
            target: 'powerpc64le-unknown-linux-gnu',
            test-crate: 'maturin/test-crates/pyo3-mixed'
          },
          {
            manylinux: 'manylinux2014',
            target: 's390x',
            test-crate: 'maturin/test-crates/pyo3-mixed'
          },
          {
            manylinux: 'auto',
            target: 'x86_64-unknown-linux-musl',  # MUSL
            test-crate: 'maturin/test-crates/hello-world'  # binary
          },
        ]
        toolchain: [stable, nightly]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: PyO3/maturin
          ref: main
          path: maturin
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: maturin build
        uses: ./
        env:
          RUST_BACKTRACE: '1'
          PYO3_CROSS_LIB_DIR: '/opt/python/cp38-cp38/lib'
        with:
          container: ${{ matrix.platform.container }}
          rust-toolchain: ${{ matrix.toolchain }}
          args: -m ${{ matrix.platform.test-crate }}/Cargo.toml -i python3.8 --no-sdist
          manylinux: ${{ matrix.platform.manylinux }}
          target: ${{ matrix.platform.target }}

  stop-runner:
    name: Stop self-hosted ECS runner
    needs: [start-runner, test]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v2
      - name: Stop ECS runner
        if: ${{ needs.start-runner.outputs.ecs-instance-id }}
        uses: messense/huaweicloud-github-runner@main
        with:
          mode: stop
          github-token: ${{ secrets.GH_PAT }}
          huawei-cloud-ak: ${{ secrets.HUAWEI_CLOUD_AK }}
          huawei-cloud-sk: ${{ secrets.HUAWEI_CLOUD_SK }}
          project-id: ${{ secrets.PROJECT_ID }}
          availability-zone: ap-southeast-1b
          label: ${{ needs.start-runner.outputs.label }}
          ecs-instance-id: ${{ needs.start-runner.outputs.ecs-instance-id }}
